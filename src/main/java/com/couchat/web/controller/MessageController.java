package com.couchat.web.controller;

import com.couchat.auth.PasskeyAuthService;
import com.couchat.messaging.model.Message;
import com.couchat.messaging.service.MessageService;
import com.couchat.web.dto.MessageSendRequestDto;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

/**
 * REST Controller for handling message-related operations.
 */
@RestController
@RequestMapping("/api/messages")
public class MessageController {

    private static final Logger logger = LoggerFactory.getLogger(MessageController.class);

    private final MessageService messageService;
    private final PasskeyAuthService passkeyAuthService;

    /**
     * Constructs a MessageController.
     *
     * @param messageService     Service for creating and processing messages.
     * @param passkeyAuthService Service for retrieving local user authentication details.
     */
    @Autowired
    public MessageController(MessageService messageService,
                             PasskeyAuthService passkeyAuthService) {
        this.messageService = messageService;
        this.passkeyAuthService = passkeyAuthService;
    }

    /**
     * Sends a new message.
     * The client is expected to provide a Message object.
     * SenderId will be set based on the authenticated user.
     * MessageId and initial timestamp will be generated by the Message constructor.
     */
    @PostMapping
    public ResponseEntity<Message> sendMessage(@RequestBody MessageSendRequestDto requestDto) { // Changed to MessageSendRequestDto
        String senderId = passkeyAuthService.getLocalUserId();
        if (senderId == null) {
            logger.warn("Send message request failed: User not authenticated.");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        // Construct the new Message object using data from the DTO and server-side data
        Message newMessage = new Message(
                requestDto.getConversationId(),
                requestDto.getType(),
                senderId, // Set by the server
                requestDto.getRecipientId(),
                requestDto.getPayload()
        );

        if (requestDto.getOriginalMessageId() != null) {
            newMessage.setOriginalMessageId(requestDto.getOriginalMessageId());
        }

        logger.info("POST /api/messages - sendMessage called by sender: {} for conversation: {}",
                senderId, newMessage.getConversationId());
        try {
            Message savedMessage = messageService.sendMessage(newMessage);
            // After sendMessage, the message might be SENT to P2P layer by the service
            return ResponseEntity.status(HttpStatus.CREATED).body(savedMessage);
        } catch (IllegalArgumentException e) {
            logger.error("Error sending message: {}", e.getMessage(), e);
            return ResponseEntity.badRequest().body(null); // Consider a proper error DTO
        } catch (Exception e) {
            logger.error("Unexpected error sending message for conversation: {}", newMessage.getConversationId(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    // Example: Get messages for a conversation
    @GetMapping("/conversation/{conversationId}")
    public ResponseEntity<List<Message>> getMessagesByConversation(
            @PathVariable String conversationId,
            @RequestParam(defaultValue = "50") int limit,
            @RequestParam(defaultValue = "0") int offset) {
        String userId = passkeyAuthService.getLocalUserId();
        if (userId == null) {
             return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        logger.info("GET /api/messages/conversation/{} - User: {}, Limit: {}, Offset: {}", conversationId, userId, limit, offset);
        // TODO: Add permission check in service: ensure current user (userId) is part of this conversationId
        List<Message> messages = messageService.getMessagesByConversation(conversationId, limit, offset);
        return ResponseEntity.ok(messages);
    }

    // Example: Mark messages as read
    @PostMapping("/conversation/{conversationId}/read")
    public ResponseEntity<Void> markConversationAsRead(@PathVariable String conversationId) {
        String userId = passkeyAuthService.getLocalUserId();
        if (userId == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        logger.info("POST /api/messages/conversation/{}/read - markConversationAsRead called by user: {}", conversationId, userId);
        try {
            // The service method should handle the logic for the given user and conversation
            messageService.markMessagesAsRead(conversationId, userId);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            logger.error("Error marking conversation {} as read for user {}: {}", conversationId, userId, e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @GetMapping("/{messageId}")
    public ResponseEntity<Message> getMessageById(@PathVariable String messageId) {
        String userId = passkeyAuthService.getLocalUserId();
        if (userId == null) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        logger.info("GET /api/messages/{} - getMessageById called by user: {}", messageId, userId);
        // TODO: Add permission check in service: ensure current user (userId) has access to this messageId
        Optional<Message> message = messageService.getMessageById(messageId);
        return message.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }
}
